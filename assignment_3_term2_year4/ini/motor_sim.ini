// Файл модели двигателя переменного тока (шагового или синхронного)

/**************************************************************************/
// Переменные вектора состояния

DEFINE double voltageA_V;
DEFINE double voltageB_V;
DEFINE double voltageC_V;

DEFINE double voltageAN_V;
DEFINE double voltageBN_V;


DEFINE double voltageAlpha_V;
DEFINE double voltageBeta_V;

DEFINE double voltageD_V;
DEFINE double voltageQ_V;

DEFINE double currentA_A;
DEFINE double currentB_A;

DEFINE double currentAlpha_A;
DEFINE double currentBeta_A;

DEFINE double currentD_A;
DEFINE double currentQ_A;

DEFINE double torque_Nm;
DEFINE double load_torque_Nm;

DEFINE double speed_Rad_s;
DEFINE double angle_Rad;

DEFINE double angle_sin;
DEFINE double angle_cos;
/**************************************************************************/

/**************************************************************************/
// Параметры двигателя

DEFINE const unsigned int is_pmsm;// bool не завезли
DEFINE const double inertia_Kg_m_m;
DEFINE const double electrical_time_constant_s;
DEFINE const double resistance_ohm;
DEFINE const double bemf_constant_V_Rad_s;
DEFINE const double torque_constant_Nm_A;
DEFINE const double power_voltage_V;
DEFINE const double angle_sensor_resolution;

is_pmsm = 1;
inertia_Kg_m_m = 0.0000005;
electrical_time_constant_s = 0.00005;
resistance_ohm = 1;
bemf_constant_V_Rad_s = 0.005;
torque_constant_Nm_A = 0.005;
power_voltage_V = 5;
angle_sensor_resolution = 1024;

/**************************************************************************/

/**************************************************************************/
// Вспомогательные параметры

DEFINE const double math_pi;
math_pi = 3.1415926535897932384626433832795; 

DEFINE const double sqrt_3;
sqrt_3 = 1.7320508075688772935274463415059;

DEFINE const double model_period_s;
model_period_s = 0.001;

// счетчик для функции рандома
DEFINE int noiseCnt;
noiseCnt = 0;

DEFINE const double amps_to_sensor_voltage;
amps_to_sensor_voltage = 1.2 / ( power_voltage_V / resistance_ohm );
/**************************************************************************/

DEFINE const double current_noise_level_percent;
current_noise_level_percent = 5;

DEFINE const double speed_Rad_s_noise_level_percent;
speed_Rad_s_noise_level_percent = 1;

DEFINE const unsigned int tim_1_arr;
tim_1_arr = 0x40012C2C;

DEFINE const unsigned int tim_1_ccr1;
tim_1_ccr1 = 0x40012C34;

DEFINE const unsigned int tim_1_ccr2;
tim_1_ccr2 = 0x40012C38;

DEFINE const unsigned int tim_1_ccr3;
tim_1_ccr3 = 0x40012C3C;

DEFINE const unsigned int tim_1_ccr4;
tim_1_ccr4 = 0x40012C40;

// инкрементальный датчик положения
DEFINE const unsigned int tim_2_cnt;
tim_2_cnt = 0x40000024;

DEFINE const double adc_input_shift;
adc_input_shift = 1.65;

DEFINE double random_value;

/********************************************************************************/

signal void generateRandom(int val)
{
    
    swatch ( model_period_s / 100 );
}
//  Преобразование из заполнений таймера в напряжения
//
//  T - напряжение в средней точке
//  T = T1 - (T2 + T3) * sqrt_3 / 2
//
//  T_arr - период таймера
//
//  Напряжения на фазах двигателя
//  Ua = ( T1 - T ) * VPower / T_arr
//  Ub = ( T2 - T ) * VPower / T_arr
//  Uc = ( T3 - T ) * VPower / T_arr
//  
//  Напряжение в осях статора
//  Ualpha = Ua
//  Ubetta = ( Ub - Uc ) / sqrt_3


signal void run_pmsm( void )
{
    //считываю показания таймера
    unsigned int arr;
    arr = _RWORD( tim_1_arr );
    
    if( arr == 0 )
    {
        voltageA_V = 0;
        voltageB_V = 0;
        voltageC_V = 0;
    }
    else
    {
        double ccr1;
        double ccr2;
        double ccr3;
        
        double inv_arr;
        double middlePointVoltage;
        
        inv_arr = 1. / arr;
        
        ccr1 = _RWORD( tim_1_ccr1 );
        ccr2 = _RWORD( tim_1_ccr2 );
        ccr3 = _RWORD( tim_1_ccr3 );
        
        middlePointVoltage = ( ccr1 + ccr2 + ccr3 ) / 3;
                
        //значения напряжений на фазах
        voltageA_V = ( ccr1 - middlePointVoltage ) * power_voltage_V * inv_arr;
        voltageB_V = ( ccr2 - middlePointVoltage ) * power_voltage_V * inv_arr;
        voltageC_V = ( ccr3 - middlePointVoltage ) * power_voltage_V * inv_arr;
        
        //напряжение в проекциях на оси статора
        voltageAlpha_V = voltageA_V;
        voltageBeta_V = ( voltageB_V - voltageC_V ) / sqrt_3;
    }
    
    currentAlpha_A = -angle_sin * currentQ_A + angle_cos * currentD_A;
    currentBeta_A = angle_sin * currentD_A + angle_cos * currentQ_A;
    
    // Ia + Ib + Ic = 0;
    // Ialpha = Ia
    // Ibeta = (Ib - Ic) / sqrt(3) = (2 * Ib + Ia) / sqrt(3)
    // Ib = ( Ibeta * sqrt(3) - Ia ) / 2
    random_value = ( rand( noiseCnt ) - 16383.5f ) / 32767.f;
    
    currentA_A = currentAlpha_A;
    currentA_A += current_noise_level_percent * random_value / 100.;
    currentB_A = ( currentBeta_A * sqrt_3 - currentAlpha_A ) / 2.f;
    
    random_value = ( rand( noiseCnt + 100 ) - 16383.5f ) / 32767.f;
    currentB_A += current_noise_level_percent * random_value / 100.;
    
    currentA_A *= amps_to_sensor_voltage;
    currentB_A *= amps_to_sensor_voltage;
    
    currentA_A += adc_input_shift;
    currentB_A += adc_input_shift;
    
    ADC1_IN0 = currentA_A;
    ADC1_IN1 = currentB_A;
    
    
    swatch (model_period_s / 100);
}


//  Преобразование из заполнений таймера в напряжения
//  И из токов в дискреты АЦП
//
//  T_arr - период таймера
//
//  Напряжение в осях статора
//  Ualpha = ( T1 - T2 ) * VPower / T_arr
//  Ubeta  = ( T3 - T4 ) * VPower / T_arr
//  
//  Токи в осях статора
//  Ialpha = Id * cos - Iq * sin
//  Ibeta  = Id * sin + Iq * cos
signal void run_stepper( void )
{
    //считываю показания таймера
    unsigned int arr;
    arr = _RWORD( tim_1_arr );
    
    if( arr == 0 )
    {
        voltageA_V = 0;
        voltageB_V = 0;
        voltageAN_V = 0;
        voltageBN_V = 0;
    }
    else
    {
        double ccr1;
        double ccr2;
        double ccr3;
        double ccr4;
        
        double inv_arr;
        
        inv_arr = 1. / arr;
        
        ccr1 = _RWORD( tim_1_ccr1 );
        ccr2 = _RWORD( tim_1_ccr2 );
        ccr3 = _RWORD( tim_1_ccr3 );
        ccr4 = _RWORD( tim_1_ccr4 );
                
        //значения напряжений на фазах
        voltageA_V = ccr1 * power_voltage_V * inv_arr;
        voltageAN_V = ccr2 * power_voltage_V * inv_arr;
        voltageB_V = ccr3 * power_voltage_V * inv_arr;
        voltageBN_V = ccr4 * power_voltage_V * inv_arr;
        
        //напряжение в проекциях на оси статора
        voltageAlpha_V = voltageA_V - voltageAN_V;
        voltageBeta_V = voltageB_V - voltageBN_V;
    }
    
    currentAlpha_A = -angle_sin * currentQ_A + angle_cos * currentD_A;
    currentBeta_A = angle_sin * currentD_A + angle_cos * currentQ_A;
    
    // функция 
    random_value = ( rand( noiseCnt ) - 16383.5f ) / 32767.f;
    currentAlpha_A += current_noise_level_percent * random_value / 100.f;
    random_value = ( rand( noiseCnt + 100 ) - 16383.5f ) / 32767.f;
    currentBeta_A += current_noise_level_percent * random_value / 100.f;
    
    currentAlpha_A *= amps_to_sensor_voltage;
    currentBeta_A *= amps_to_sensor_voltage;
    
    currentAlpha_A += adc_input_shift;
    currentBeta_A += adc_input_shift;
    
    ADC1_IN0 = currentAlpha_A;
    ADC1_IN1 = currentBeta_A;
    
    
    swatch (model_period_s / 100);
}


/********************************************************************************/


//  Модель мотора 
//
//  Напряжение в осях ротора
//  Ud = Ualpha * cos - Ubetta * sin
//  Uq = Ualpha * sin + Ubetta * cos
//
//  Уравнение электрической части двигателя
//  Ud(t) = L * di_d(t) / dt + R * i_d(t) - w * Ce
//  Uq(t) = L * di_q(t) / dt + R * i_q(t) + w * Ce
//
//  Уравнение дискретной модели
//  i_d(k) = ( Ud(k) + w * Ce + i_d(k-1) * L / dt ) / ( R + L / dt )
//  i_q(k) = ( Uq(k) - w * Ce + i_q(k-1) * L / dt ) / ( R + L / dt )
//
//  i_d(k) = ( Ud(k) / R + w * Ce / R + i_d(k-1) * electrical_time_constant_s / dt ) / ( 1 + electrical_time_constant_s / dt )
//  i_q(k) = ( Uq(k) / R - w * Ce / R + i_q(k-1) * electrical_time_constant_s / dt ) / ( 1 + electrical_time_constant_s / dt )
//
//  M = i_q(t) * Cm
//
//  a = (M-load_torque_Nm)/inertia_Kg_m_m
//
//  w(t) = ( M - load_torque_Nm ) / inertia_Kg_m_m / s
//
//  w(k) = ( M - load_torque_Nm ) / inertia_Kg_m_m * dt + w(k-1)
//
//  angle_Rad(t) = w(t) / s
//
//  angle_Rad(k) = w(k) * dt + angle_Rad(k-1)
signal void motorModel( void )
{    
    //переношу на оси ротора
    voltageD_V = angle_sin * voltageBeta_V + angle_cos * voltageAlpha_V;
    voltageQ_V = -angle_sin * voltageAlpha_V + angle_cos * voltageBeta_V;
    
    //уравнения электрической части модели
    currentD_A = ( voltageD_V / resistance_ohm + speed_Rad_s * bemf_constant_V_Rad_s / resistance_ohm + 
                currentD_A * electrical_time_constant_s / model_period_s ) / ( 1 + electrical_time_constant_s / model_period_s );
    currentQ_A = ( voltageQ_V / resistance_ohm - speed_Rad_s * bemf_constant_V_Rad_s / resistance_ohm + 
                currentQ_A * electrical_time_constant_s / model_period_s ) / ( 1 + electrical_time_constant_s / model_period_s );
    
    // уравнение механической части модели
    torque_Nm = currentQ_A * torque_constant_Nm_A;
    
    // нахожу текущую скорость
    speed_Rad_s = ( torque_Nm - load_torque_Nm ) / inertia_Kg_m_m * model_period_s + speed_Rad_s;
    
    // и угол
    angle_Rad = speed_Rad_s * model_period_s + angle_Rad;
    while( angle_Rad > 2 * math_pi )
    {
        angle_Rad -= 2 * math_pi;
    }
    while( angle_Rad < 0 )
    {
        angle_Rad += 2 * math_pi;
    }
    
    // в разрядности датчика
    _WWORD( tim_2_cnt, angle_Rad * angle_sensor_resolution / (2 * math_pi) );
    
    angle_sin = __sin( angle_Rad );
    angle_cos = __cos( angle_Rad );
    
    swatch (model_period_s / 100);
}


// основная функция симулятора
signal void simulator_run (void) 
{
    currentD_A = 0;
    currentQ_A = 0;
    
    torque_Nm = 0;
    load_torque_Nm = 0;
    
    speed_Rad_s = 0;
    angle_Rad = 0;
    
    angle_sin = 0;
    angle_cos = 1;
    
    while (1) 
    {
        if( is_pmsm )
        {
            run_pmsm();
        }
        else
        {
            run_stepper();
        }
        
        motorModel();
        noiseCnt++;
        swatch (model_period_s);
    }
}
simulator_run ()

g, main

